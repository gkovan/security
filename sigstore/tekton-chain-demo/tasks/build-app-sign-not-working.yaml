apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-app-sign
spec:
  params:
    - default: springboot
      description: the context dir within source
      name: contextDir
      type: string
    - default: 'https://repo.maven.apache.org/maven2/'
      description: the maven mirrror url
      name: mavenMirrorUrl
      type: string
    - default: $(outputs.resources.builtImage.url)
      description: the fully qualified image name
      name: destinationImage
      type: string
    - default: Dockerfile
      description: the docker file to used for building the application
      name: dockerFile
      type: string
    - default: 'false'
      description: tls verify
      name: tlsVerify
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: builtImage
        type: image
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
    - description: URL of the image just built.
      name: IMAGE_URL
  steps:
    - args:
        - '-DskipTests'
        - clean
        - package
      command:
        - mvn
      env:
        - name: user.home
          value: /home/tekton
      image: 'docker.io/maven:3.6.3-openjdk-11-slim'
      name: build-sources
      resources: {}
      workingDir: /workspace/source/$(inputs.params.contextDir)
    - args:
        - bud
        - '--layers'
        - '--storage-driver=vfs'
        - '-f'
        - $(inputs.params.dockerFile)
        - '-t'
        - $(inputs.params.destinationImage)
        - .
      command:
        - buildah
      image: quay.io/buildah/stable
      name: build-image
      resources: {}
      securityContext:
        privileged: true
        runAsUser: 0
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibc
      workingDir: /workspace/source/$(inputs.params.contextDir)
    - image: quay.io/buildah/stable
      name: push-image
      resources: {}
      script: |
        buildah --storage-driver=vfs push \
        --tls-verify=$(inputs.params.tlsVerify) \
        --digestfile /tekton/results/IMAGE_DIGEST \
        $(inputs.params.destinationImage) \
        docker://$(inputs.params.destinationImage)
      securityContext:
        privileged: true
        runAsUser: 0
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibc
      workingDir: /workspace/source/$(inputs.params.contextDir)
    - name: cosign
      env:
        - name: COSIGN_KEY
          valueFrom:
            secretKeyRef:
              name: cosign-keys
              key: cosign.key
        - name: COSIGN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cosign-keys
              key: cosign.password
      image: gcr.io/projectsigstore/cosign/ci/cosign:v0.5.0
      script: |
        #!/busybox/env /busybox/sh
        set +x
        APP_IMAGE="$(inputs.params.destinationImage)"
        echo "${COSIGN_KEY}" >> cosign.key
        echo "### GK: printing out the cosign private key file:"
        cat cosign.key
        CMD="cosign sign -key cosign.key ${APP_IMAGE}"
        echo "${CMD}"
        echo "Attempting to sign image url:"
        echo "${APP_IMAGE}"
        ERR_MSG="Failed to sign ${APP_IMAGE}"
        ${CMD} &> result
        err=$?
        cat result
        if [[ ${err} -ne 0 ]]; then
          echo "${ERR_MSG}"
          exit 1
        fi
      securityContext:
        privileged: true
        runAsUser: 0
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibc
      workingDir: /workspace/source/$(inputs.params.contextDir)
    - args:
        - '--version'
      command:
        - buildah
      image: quay.io/buildah/stable
      name: buildah-version
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibc
      workingDir: /workspace/source/$(inputs.params.contextDir)
    - image: bash
      name: cat-of-digest
      resources: {}
      script: cat /tekton/results/IMAGE_DIGEST
      securityContext:
        privileged: true
    - image: bash
      name: write-url
      resources: {}
      script: >
        set -e

        echo $(inputs.params.destinationImage) | tee
        $(results.IMAGE_URL.path)
  volumes:
    - emptyDir: {}
      name: varlibc
